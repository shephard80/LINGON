#!/bin/bash
## Author: Sebastian Mueller, shephard@orbitxp.com
## Released under GNU License v3

## Rsyslog is used to log system messages. Instead of putting logs on the filesystem it inputs them into
## a SQL database instead. Then the database is replicated meaning that logs can be accessed from
## different hosts and backed up.

## Global variables
RSYSLOG_CONFIG="/etc/rsyslog.conf"
RSYSLOG_CONFIG_PATH="/etc/rsyslog.d/"
RSYSLOG_SQL_CONFIG="mysql.conf"
RSYSLOG_SQL_USER="rsyslog"
RSYSLOG_SQL_PASS="$ADMIN_PASS"
RSYSLOG_SQL_DB="rsyslog"
RSYSLOG_SQL_HOST="$MYSQL_HOST"
RSYSLOG_IMPORT_SQL_FILE="rsyslog.sql"
RSYSLOG_Q_CONFIG="queue.conf"
MODULE_PARAMETERS+=([rsyslog_sql_user]="${RSYSLOG_SQL_USER}" [rsyslog_sql_passwd]="${RSYSLOG_SQL_PASS}" [rsyslog_sql_db]="${RSYSLOG_SQL_DB}")

###########################################
## Do not config DB automatically. We do it below manually instead.
pre_seed "rsyslog-mysql" "rsyslog-mysql/dbconfig-install" "boolean" "false"
pre_seed "rsyslog-mysql" "rsyslog-mysql/internal/skip-preseed" "boolean" "true"

## Install rsyslog (To log system events. Also include rsyslog-sql to put events into SQL database)
install_pkg rsyslog
install_pkg rsyslog-mysql

## Set up SQL config file
if $(find_string_in_file "*.* :ommysql:localhost,,," "$RSYSLOG_CONFIG_PATH$RSYSLOG_SQL_CONFIG"); then
	replace_line "*.* :ommysql:localhost,,," "*.* :ommysql:${RSYSLOG_SQL_HOST},${RSYSLOG_SQL_DB},${RSYSLOG_SQL_USER},${RSYSLOG_SQL_PASS}" "$RSYSLOG_CONFIG_PATH$RSYSLOG_SQL_CONFIG"

	echo -e "template(name=\"stdSQLformat\" type=\"string\" option.sql=\"on\"" >> "$RSYSLOG_CONFIG_PATH$RSYSLOG_SQL_CONFIG"
	echo -e "		string=\"insert into SystemEvents (Message, Facility, FromHost, Priority, DeviceReportedTime, ReceivedAt, InfoUnitID, SysLogTag) values ('%msg%', %syslogfacility%, '%HOSTNAME%', %syslogpriority%, '%timereported:::date-mysql%', '%timegenerated:::date-mysql%', %iut%, '%syslogtag%')\"" >> "$RSYSLOG_CONFIG_PATH$RSYSLOG_SQL_CONFIG"
	echo -e ")" >> "$RSYSLOG_CONFIG_PATH$RSYSLOG_SQL_CONFIG"

	log_event "Added config into $RSYSLOG_CONFIG_PATH$RSYSLOG_SQL_CONFIG" "info"
else
	log_event "SQL config already present in rsyslog $RSYSLOG_CONFIG_PATH$RSYSLOG_SQL_CONFIG file" "warn"
fi

## Setup Queue config file
if [ ! -f "$RSYSLOG_CONFIG_PATH$RSYSLOG_Q_CONFIG" ]; then
	touch "$RSYSLOG_CONFIG_PATH$RSYSLOG_Q_CONFIG"
	log_event "Created rsyslog queue file: $RSYSLOG_CONFIG_PATH$RSYSLOG_Q_CONFIG" "info"
else
	log_event "Rsyslog queue file: $RSYSLOG_CONFIG_PATH$RSYSLOG_Q_CONFIG already exists." "warn"
fi
if [ ! $(find_string_in_file "$ActionQueueType LinkedList # use asynchronous processing" "$RSYSLOG_CONFIG_PATH$RSYSLOG_Q_CONFIG") ]; then
	echo -e "## Rsyslog queue settings" >> "$RSYSLOG_CONFIG_PATH$RSYSLOG_Q_CONFIG"
	echo -e "\$ActionQueueType LinkedList # use asynchronous processing" >> "$RSYSLOG_CONFIG_PATH$RSYSLOG_Q_CONFIG"
	echo -e "\$ActionQueueFileName dbq    # set file name, also enables disk mode" >> "$RSYSLOG_CONFIG_PATH$RSYSLOG_Q_CONFIG"
	echo -e "\$ActionResumeRetryCount -1  # infinite retries on insert failure" >> "$RSYSLOG_CONFIG_PATH$RSYSLOG_Q_CONFIG"
	log_event "Added rsyslog queue config: $RSYSLOG_CONFIG_PATH$RSYSLOG_SQL_CONFIG" "info"
else
	log_event "Rsyslog queue config already exists in $RSYSLOG_CONFIG_PATH$RSYSLOG_Q_CONFIG" "warn"
fi

## Set up SQL structure
create_sql_database "$RSYSLOG_SQL_DB"
import_sql_file "$RSYSLOG_IMPORT_SQL_FILE" "$RSYSLOG_SQL_DB"
	
## Set up SQL user
create_sql_user "$RSYSLOG_SQL_USER" "$RSYSLOG_SQL_PASS" "$RSYSLOG_SQL_HOST" "$RSYSLOG_SQL_DB"

## Restart service
systemctl restart rsyslog
sleep 5
